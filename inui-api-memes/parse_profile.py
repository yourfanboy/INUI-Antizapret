import requests
import json
import hashlib
import secrets

class INUIUserProfileParser:
    def __init__(self, email, password):
        self.email = email
        self.password = password
        self.auth_token = None
        self.base_url = "https://api.inuisoftware.com/api/v1"
        
    def generate_random_sha256(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π SHA-256 —Ö–µ—à"""
        random_string = secrets.token_hex(32)
        return hashlib.sha256(random_string.encode()).hexdigest()
    
    def get_headers(self, include_auth=True):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        headers = {
            'x-inui-id': self.generate_random_sha256(),
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) INUIClient/0.107.5 Chrome/130.0.6723.118 Electron/33.2.0 Safari/537.36',
            'Content-Type': 'application/json',
            'origin': 'inui://inui',
            'sec-fetch-site': 'cross-site',
            'sec-fetch-mode': 'cors',
            'sec-fetch-dest': 'empty',
            'accept-encoding': 'gzip, deflate, br, zstd',
            'accept-language': 'en-US',
            'priority': 'u=1, i',
            'sec-ch-ua-platform': '"Windows"',
            'sec-ch-ua': '"Not?A_Brand";v="99", "Chromium";v="130"',
            'sec-ch-ua-mobile': '?0',
            'x-app-version': '0.107.5',
            'accept': 'application/json, text/plain, */*'
        }
        
        if include_auth and self.auth_token:
            headers['authorization'] = f'Bearer {self.auth_token}'
            
        return headers
    
    def authenticate(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        auth_url = f"{self.base_url}/auth"
        auth_data = {
            "email": self.email,
            "password": self.password
        }
        
        headers = self.get_headers(include_auth=False)
        
        try:
            response = requests.post(auth_url, json=auth_data, headers=headers)
            response.raise_for_status()
            
            auth_response = response.json()
            
            if auth_response.get('status') == 'SUCCESS':
                self.auth_token = auth_response['payload']['accessToken']
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_response}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return False
    
    def get_user_profile(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        if not self.auth_token:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            return None
            
        profile_url = f"{self.base_url}/user?userId={user_id}"
        headers = self.get_headers()
        
        try:
            response = requests.get(profile_url, headers=headers)
            response.raise_for_status()
            
            profile_data = response.json()
            
            if profile_data.get('event') != 'get_user_profile_by_user_id':
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {profile_data.get('event')}")
                return None
                
            if 'content' not in profile_data:
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç content –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
                
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            return profile_data['content']
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"   –°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
                try:
                    error_data = e.response.json()
                    print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_data}")
                except:
                    print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None
    
    def save_profile_to_file(self, profile_data, filename="user_profile.txt"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("=== –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===\n\n")
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                f.write(f"User ID: {profile_data.get('userId', 'N/A')}\n")
                f.write(f"–ù–∏–∫–Ω–µ–π–º: {profile_data.get('nickname', 'N/A')}\n")
                f.write(f"Public Name: {profile_data.get('publicName', 'N/A')}\n")
                f.write(f"Username: {profile_data.get('username', 'N/A')}\n")
                f.write(f"–°—Ç–∞—Ç—É—Å: {profile_data.get('status', 'N/A')}\n")
                f.write(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {profile_data.get('lastVisit', 'N/A')}\n")
                f.write(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile_data.get('memberSince', 'N/A')}\n")
                f.write(f"–°—Ç—Ä–∞–Ω–∞: {profile_data.get('country', 'N/A')}\n")
                f.write(f"–ì–æ—Ä–æ–¥: {profile_data.get('city', 'N/A')}\n")
                f.write(f"–ê–≤–∞—Ç–∞—Ä: {profile_data.get('avatarSrc', 'N/A')}\n")
                f.write(f"–§–æ–Ω –ø—Ä–æ—Ñ–∏–ª—è: {profile_data.get('backgroundSrc', 'N/A')}\n")
                f.write(f"Pro —Å—Ç–∞—Ç—É—Å: {'–î–∞' if profile_data.get('pro', False) else '–ù–µ—Ç'}\n")
                f.write(f"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if profile_data.get('verified', False) else '–ù–µ—Ç'}\n\n")
                
                # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                f.write("=== –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===\n")
                f.write(f"–î—Ä—É–∑–µ–π: {profile_data.get('friendsCount', 0)}\n")
                f.write(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {profile_data.get('followersCount', 0)}\n")
                f.write(f"–ü–æ–¥–ø–∏—Å–æ–∫: {profile_data.get('followedCount', 0)}\n")
                f.write(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {profile_data.get('blockedUsersCount', 0)}\n")
                f.write(f"–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è: {profile_data.get('friendRequestsCount', 0)}\n\n")
                
                # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                if 'socialLinks' in profile_data and profile_data['socialLinks']:
                    f.write("=== –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ ===\n")
                    for link in profile_data['socialLinks']:
                        f.write(f"{link.get('appName', 'N/A')}: {link.get('link', 'N/A')}\n")
                        if 'title' in link:
                            f.write(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {link['title']}\n")
                    f.write("\n")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                f.write("=== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===\n")
                f.write(f"–°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {profile_data.get('authStatus', 'N/A')}\n")
                f.write(f"–£—Ä–æ–≤–µ–Ω—å: {profile_data.get('level', 0)}\n")
                f.write(f"–û–ø—ã—Ç: {profile_data.get('experience', 0)}/{profile_data.get('finishExpOfLevel', 100)}\n")
                f.write(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—Å: {'–î–∞' if profile_data.get('blockedMe', False) else '–ù–µ—Ç'}\n")
                f.write(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è: {'–î–∞' if profile_data.get('friendRequestSent', False) else '–ù–µ—Ç'}\n")
                f.write(f"–î—Ä—É–≥: {'–î–∞' if profile_data.get('isFriend', False) else '–ù–µ—Ç'}\n")
                f.write(f"–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤–∞—Å: {'–î–∞' if profile_data.get('isFollowed', False) else '–ù–µ—Ç'}\n")
                f.write(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–∞–º–∏: {'–î–∞' if profile_data.get('isBlockedByMe', False) else '–ù–µ—Ç'}\n")

            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª '{filename}'")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return False

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    EMAIL = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
    PASSWORD = ""        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    USER_ID = "BNHYOYZKVKI42GXS"      # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π user_id
    OUTPUT_FILE = "user_profile.txt"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è INUI...")
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä
    parser = INUIUserProfileParser(EMAIL, PASSWORD)
    
    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    if not parser.authenticate():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    print(f"üîç –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {USER_ID}...")
    profile_data = parser.get_user_profile(USER_ID)
    
    if profile_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        parser.save_profile_to_file(profile_data, OUTPUT_FILE)
        print("üéâ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

if __name__ == "__main__":
    main()