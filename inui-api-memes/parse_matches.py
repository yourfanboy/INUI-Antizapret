import requests
import json
import hashlib
import secrets
import time
import os

class INUIMatchParser:
    def __init__(self, email, password):
        self.email = email
        self.password = password
        self.auth_token = None
        self.base_url = "https://api.inuisoftware.com/api/v1"
        
    def generate_random_sha256(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π SHA-256 —Ö–µ—à"""
        random_string = secrets.token_hex(32)
        return hashlib.sha256(random_string.encode()).hexdigest()
    
    def get_headers(self, include_auth=True):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        headers = {
            'x-inui-id': self.generate_random_sha256(),
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) INUIClient/0.107.5 Chrome/130.0.6723.118 Electron/33.2.0 Safari/537.36',
            'Content-Type': 'application/json',
            'origin': 'inui://inui',
            'sec-fetch-site': 'cross-site',
            'sec-fetch-mode': 'cors',
            'sec-fetch-dest': 'empty',
            'accept-encoding': 'gzip, deflate, br, zstd',
            'accept-language': 'en-US',
            'priority': 'u=1, i',
            'sec-ch-ua-platform': '"Windows"',
            'sec-ch-ua': '"Not?A_Brand";v="99", "Chromium";v="130"',
            'sec-ch-ua-mobile': '?0',
            'x-app-version': '0.107.5',
            'accept': 'application/json, text/plain, */*'
        }
        
        if include_auth and self.auth_token:
            headers['authorization'] = f'Bearer {self.auth_token}'
            
        return headers
    
    def authenticate(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        auth_url = f"{self.base_url}/auth"
        auth_data = {
            "email": self.email,
            "password": self.password
        }
        
        headers = self.get_headers(include_auth=False)
        
        try:
            response = requests.post(auth_url, json=auth_data, headers=headers)
            response.raise_for_status()
            
            auth_response = response.json()
            
            if auth_response.get('status') == 'SUCCESS':
                self.auth_token = auth_response['payload']['accessToken']
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_response}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return False
    
    def get_match_details(self, match_id, game_version=1):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ"""
        if not self.auth_token:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            return None
            
        match_url = f"{self.base_url}/statistic/match/{match_id}"
        params = {'gameVersion': game_version}
        headers = self.get_headers()
        
        try:
            response = requests.get(match_url, params=params, headers=headers)
            response.raise_for_status()
            
            match_data = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ {match_id}")
            return match_data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ {match_id}: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"   –°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
                try:
                    error_data = e.response.json()
                    print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_data}")
                except:
                    print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {e.response.text}")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {e}")
            return None
    
    def extract_team_players(self, match_data):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥ (nickname, userId, avatarSrc)"""
        red_players = []
        blue_players = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ content –≤ –æ—Ç–≤–µ—Ç–µ
        if 'content' not in match_data:
            return red_players, blue_players
        
        content = match_data['content']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫—Ä–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        red_team = content.get('redTeam', {})
        if 'players' in red_team:
            for player in red_team['players']:
                player_data = {
                    'nickname': player.get('nickname', 'Unknown'),
                    'userId': player.get('userId', ''),
                    'avatarSrc': player.get('avatarSrc', '')
                }
                red_players.append(player_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å–∏–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã
        blue_team = content.get('blueTeam', {})
        if 'players' in blue_team:
            for player in blue_team['players']:
                player_data = {
                    'nickname': player.get('nickname', 'Unknown'),
                    'userId': player.get('userId', ''),
                    'avatarSrc': player.get('avatarSrc', '')
                }
                blue_players.append(player_data)
        
        return red_players, blue_players
    
    def read_match_ids_from_file(self, filename="mirage_matches.txt"):
        """–ß–∏—Ç–∞–µ—Ç ID –º–∞—Ç—á–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        match_ids = []
        
        try:
            if not os.path.exists(filename):
                print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return match_ids
                
            with open(filename, 'r', encoding='utf-8') as f:
                for line in f:
                    match_id = line.strip()
                    if match_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        match_ids.append(match_id)
            
            print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(match_ids)} ID –º–∞—Ç—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
            return match_ids
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            return match_ids
    
    def parse_all_matches(self, input_filename="mirage_matches.txt", output_filename="match_players.txt"):
        """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –º–∞—Ç—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö"""
        match_ids = self.read_match_ids_from_file(input_filename)
        
        if not match_ids:
            print("‚ùå –ù–µ—Ç ID –º–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            return False
        
        all_results = []
        successful_matches = 0
        
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(match_ids)} –º–∞—Ç—á–µ–π...")
        
        for i, match_id in enumerate(match_ids, 1):
            print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á {i}/{len(match_ids)}: {match_id}")
            
            match_data = self.get_match_details(match_id)
            
            if match_data:
                red_players, blue_players = self.extract_team_players(match_data)
                
                result = {
                    'match_id': match_id,
                    'red_players': red_players,
                    'blue_players': blue_players
                }
                
                all_results.append(result)
                successful_matches += 1
                
                print(f"   ‚úÖ Red: {len(red_players)} –∏–≥—Ä–æ–∫–æ–≤, Blue: {len(blue_players)} –∏–≥—Ä–æ–∫–æ–≤")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if all_results:
            self.save_results_to_file(all_results, output_filename)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {successful_matches}/{len(match_ids)} –º–∞—Ç—á–µ–π")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞!")
            return False
    
    def save_results_to_file(self, results, filename="match_players.txt"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                for result in results:
                    match_id = result['match_id']
                    red_players = result['red_players']
                    blue_players = result['blue_players']
                    
                    f.write(f"{match_id}:\n")
                    f.write("Red Team players:\n")
                    for player in red_players:
                        f.write(f"Nickname: {player['nickname']}\n")
                        f.write(f"UserID: {player['userId']}\n")
                        f.write(f"Avatar: {player['avatarSrc']}\n")
                        f.write("\n")
                    
                    f.write("Blue Team players:\n")
                    for player in blue_players:
                        f.write(f"Nickname: {player['nickname']}\n")
                        f.write(f"UserID: {player['userId']}\n")
                        f.write(f"Avatar: {player['avatarSrc']}\n")
                        f.write("\n")
                    
                    f.write("\n")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –º–∞—Ç—á–∞–º–∏
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª '{filename}'")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
            return False

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    EMAIL = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
    PASSWORD = ""        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    INPUT_FILE = "mirage_matches.txt"  # –§–∞–π–ª —Å ID –º–∞—Ç—á–µ–π
    OUTPUT_FILE = "match_players.txt"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –º–∞—Ç—á–µ–π INUI...")
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Å–µ—Ä
    parser = INUIMatchParser(EMAIL, PASSWORD)
    
    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    if not parser.authenticate():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
        return
    
    # –ü–∞—Ä—Å–∏–º –≤—Å–µ –º–∞—Ç—á–∏
    print(f"üìñ –ß–∏—Ç–∞–µ–º ID –º–∞—Ç—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞ '{INPUT_FILE}'...")
    success = parser.parse_all_matches(INPUT_FILE, OUTPUT_FILE)
    
    if success:
        print(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª–µ '{OUTPUT_FILE}'")
    else:
        print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == "__main__":
    main()